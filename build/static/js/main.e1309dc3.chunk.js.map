{"version":3,"sources":["assets/img/vishal.jpg","components/githubCredentials.js","components/GithubProfileCard.js","components/GithubProfileDetails.js","components/GithubProfile.js","components/GithubRepos.js","components/GithubSearchApp.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","clientSecret","GithubProfileCard","props","Fragment","className","src","profile","avatar_url","alt","name","bio","href","html_url","target","GithubProfileDetails","followers","public_repos","public_gists","following","location","email","company","blog","created_at","GithubProfile","Object","keys","length","GithubRepos","repos","map","repo","stargazers_count","watchers_count","GithubSearchApp","useState","username","setUsername","setProfile","setRepos","searchProfile","dataURL","Axios","get","then","response","data","catch","err","console","error","searchRepos","onSubmit","e","preventDefault","value","onChange","size","type","placeholder","App","rel","Vishal","onMouseEnter","style","border","borderRadius","padding","onMouseLeave","height","width","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.e1309dc3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/vishal.0ff9dc72.jpg\";","export const clientID = '286f134531619155dc1c';\r\nexport const clientSecret = '8fefd47a491a936ba223f05ba1a2c0e2cd44dcb1';\r\n","import React from \"react\";\r\n\r\nlet GithubProfileCard = (props) => {\r\n    return(\r\n        <React.Fragment>\r\n            <div className=\"card\">\r\n                <img src={props.profile.avatar_url} alt=\"\" className=\"img-fluid\"/>\r\n                <div className=\"card-body\">\r\n                    <p className=\"h4\">{props.profile.name}</p>\r\n                    <p>{props.profile.bio}</p>\r\n                    <a href={props.profile.html_url} className=\"btn btn-success btn-sm\" target=\"_blank\">Profile</a>\r\n                </div>\r\n            </div>\r\n        </React.Fragment>\r\n    )\r\n};\r\nexport default GithubProfileCard;\r\n","import React from \"react\";\r\n\r\nlet GithubProfileDetails = (props) => {\r\n    return(\r\n        <React.Fragment>\r\n            <div className=\"card\">\r\n                <div className=\"card-header\">\r\n                    <span className=\"badge badge-success mx-1\">Followers : {props.profile?.followers}</span>\r\n                    <span className=\"badge badge-primary mx-1\">Repos : {props.profile?.public_repos}</span>\r\n                    <span className=\"badge badge-warning mx-1\">Gists : {props.profile?.public_gists}</span>\r\n                    <span className=\"badge badge-danger mx-1\">Following : {props.profile?.following}</span>\r\n                </div>\r\n                <div className=\"card-body\">\r\n                    <ul className=\"list-group\">\r\n                        <li className=\"list-group-item\">\r\n                            NAME : {props.profile?.name}\r\n                        </li>\r\n                        <li className=\"list-group-item\">\r\n                            Location : {props.profile?.location}\r\n                        </li>\r\n                        <li className=\"list-group-item\">\r\n                            Email : {props.profile?.email}\r\n                        </li>\r\n                        <li className=\"list-group-item\">\r\n                            Company : <a href={props.profile?.company} target=\"_blank\">{props.profile?.company}</a>\r\n                        </li>\r\n                        <li className=\"list-group-item\">\r\n                            Blog : <a href={props.profile?.blog} target=\"_blank\">{props.profile?.blog}</a>\r\n                        </li>\r\n                        <li className=\"list-group-item\">\r\n                            Member Since : {props.profile?.created_at}\r\n                        </li>\r\n                        <li className=\"list-group-item\">\r\n                            Profile URL : <a href={props.profile?.html_url} target=\"_blank\">{props.profile?.html_url}</a>\r\n                        </li>\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        </React.Fragment>\r\n    )\r\n};\r\nexport default GithubProfileDetails;\r\n","import React from \"react\";\r\nimport GithubProfileCard from \"./GithubProfileCard\";\r\nimport GithubProfileDetails from \"./GithubProfileDetails\";\r\n\r\nlet GithubProfile = (props) => {\r\n    return(\r\n        <React.Fragment>\r\n                <div className=\"row\">\r\n                    <div className=\"col\">\r\n                        <p className=\"h4 text-secondary\">Your Profile</p>\r\n                    </div>\r\n                </div>\r\n                {\r\n                    Object.keys(props).length > 0 ?\r\n                        <React.Fragment>\r\n                            <div className=\"row\">\r\n                                <div className=\"col-md-3\">\r\n                                    <GithubProfileCard profile={props.profile}/>\r\n                                </div>\r\n                                <div className=\"col-md-9\">\r\n                                    <GithubProfileDetails profile={props.profile}/>\r\n                                </div>\r\n                            </div>\r\n                        </React.Fragment>: null\r\n                }\r\n        </React.Fragment>\r\n    )\r\n};\r\nexport default GithubProfile;\r\n","import React from \"react\";\r\n\r\nlet GithubRepos = (props) => {\r\n    return(\r\n        <React.Fragment>\r\n            <div className=\"row\">\r\n                <div className=\"col\">\r\n                    <p className=\"h4 text-secondary\">Your Repositories</p>\r\n                </div>\r\n            </div>\r\n            {\r\n                Object.keys(props).length > 0 ?\r\n                    <React.Fragment>\r\n                        <div className=\"row\">\r\n                            <div className=\"col\">\r\n                                <div className=\"card mt-3\">\r\n                                    <div className=\"card-header\">\r\n                                        <p className=\"h4\">Your Repositories</p>\r\n                                    </div>\r\n                                    <div className=\"card-body\">\r\n                                        <ul className=\"list-group\">\r\n                                            {\r\n                                                props.repos.map((repo) => {\r\n                                                    return(\r\n                                                        <li className=\"list-group-item d-flex justify-content-around\">\r\n                                                            <p className=\"h5\">\r\n                                                                <a href={repo.html_url} target=\"_blank\">{repo.name}</a>\r\n                                                            </p>\r\n                                                            <span className=\"badge badge-success\">{repo.stargazers_count} Stars</span>\r\n                                                            <span className=\"badge badge-primary\">{repo.watchers_count} Watches</span>\r\n                                                        </li>\r\n                                                    )\r\n                                                })\r\n                                            }\r\n                                        </ul>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </React.Fragment> : null\r\n            }\r\n        </React.Fragment>\r\n    )\r\n};\r\nexport default GithubRepos;\r\n","import React, {useState} from \"react\";\r\nimport Axios from \"axios\";\r\nimport {clientID, clientSecret} from \"./githubCredentials\";\r\nimport GithubProfile from \"./GithubProfile\";\r\nimport GithubRepos from \"./GithubRepos\";\r\n\r\nlet GithubSearchApp = () => {\r\n    let [username , setUsername] = useState('');\r\n    let [profile , setProfile] = useState({});\r\n    let [repos , setRepos] = useState([]);\r\n\r\n    let searchUser = (e) => {\r\n        e.preventDefault();\r\n        searchProfile(username);\r\n        searchRepos(username);\r\n    };\r\n\r\n    let searchProfile = (username) => {\r\n        let dataURL = `http://api.github.com/users/${username}?clientId=${clientID}&clientSecret=${clientSecret}`;\r\n        Axios.get(dataURL).then((response) => {\r\n            setProfile(response.data);\r\n        }).catch((err) => {\r\n            console.error(err);\r\n        });\r\n    };\r\n\r\n    let searchRepos = (username) => {\r\n        let dataURL = `http://api.github.com/users/${username}/repos?clientId=${clientID}&clientSecret=${clientSecret}`;\r\n        Axios.get(dataURL).then((response) => {\r\n            setRepos(response.data);\r\n        }).catch((err) => {\r\n            console.error(err);\r\n        });\r\n    };\r\n\r\n    return(\r\n        <React.Fragment>\r\n            <div className=\"container mt-3\">\r\n                <div className=\"row\">\r\n                    <div className=\"col\">\r\n                        <div className=\"card\">\r\n                            <div className=\"card-header bg-secondary text-white\">\r\n                                <p className=\"h4\">Github Search</p>\r\n                            </div>\r\n                            <div className=\"card-body\">\r\n                                <form className=\"form-inline\" onSubmit={searchUser}>\r\n                                    <div className=\"form-group\">\r\n                                        <input\r\n                                            value={username}\r\n                                            onChange={(e) => setUsername(e.target.value)}\r\n                                            size=\"40\" type=\"search\" className=\"form-control\" placeholder=\"Username\"/>\r\n                                    </div>\r\n                                    <div>\r\n                                        <input\r\n                                            type=\"submit\" value=\"Search\" className=\"btn btn-secondary btn-sm\"/>\r\n                                    </div>\r\n                                </form>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"row mt-3\">\r\n                    <div className=\"col\">\r\n                        {\r\n                            Object.keys(profile).length > 0 ?\r\n                                <React.Fragment>\r\n                                    <GithubProfile profile={profile}/>\r\n                                </React.Fragment> : null\r\n                        }\r\n                    </div>\r\n                </div>\r\n                <div className=\"row mt-3\">\r\n                    <div className=\"col\">\r\n                        {\r\n                            repos.length > 0 ?\r\n                                <React.Fragment>\r\n                                    <GithubRepos repos={repos}/>\r\n                                </React.Fragment> : null\r\n                        }\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </React.Fragment>\r\n    )\r\n};\r\nexport default GithubSearchApp;\r\n","import React from 'react';\nimport './App.css';\nimport GithubSearchApp from \"./components/GithubSearchApp\";\nimport Vishal from './assets/img/vishal.jpg'\n\nlet App = () => {\n    let imgHover=(e)=>{\n        e.target.style.border=\"1px solid white\";\n        e.target.style.borderRadius=\"50%\";\n        e.target.style.padding=\"2px\";\n    };\n    let imgHoverOff =(e)=>{\n        e.target.style.border=\"none\";\n        e.target.style.borderRadius=\"0%\";\n        e.target.style.padding=\"0px\";\n    };\n    return(\n        <React.Fragment>\n           <nav className=\"navbar navbar-dark bg-dark navbar-expand-sm\">\n               <a href=\"/\" className=\"navbar-brand\">Github Search Advanced</a>\n               <a href=\"https://www.linkedin.com/in/vishal-d-0b767711b\" className=\"ml-auto\" target=\"_blank\" rel=\"noopener noreferrer\"><img src={Vishal} onMouseEnter={imgHover} onMouseLeave={imgHoverOff} className=\"img-fluid rounded-circle mr-md-4 mr-0\" height={45} width={45} alt=\"VishalDilwale\"/></a>\n           </nav>\n\n            <GithubSearchApp/>\n        </React.Fragment>\n    );\n};\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","// MDBootstrap css files\nimport './bootstrap/css/font-awesome-5.8.1.css';\nimport 'mdbootstrap/css/bootstrap.css';\nimport 'mdbootstrap/css/mdb.css';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}